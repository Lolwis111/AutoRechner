<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonAbout" xml:space="preserve">
    <value>&amp;About</value>
  </data>
  <data name="ButtonAddBrand" xml:space="preserve">
    <value>Add brand</value>
  </data>
  <data name="ButtonAddUser" xml:space="preserve">
    <value>Add user</value>
  </data>
  <data name="ButtonBackToOverview" xml:space="preserve">
    <value>&amp;Back to car list</value>
  </data>
  <data name="ButtonCancel" xml:space="preserve">
    <value>&amp;Cancel</value>
  </data>
  <data name="ButtonCar" xml:space="preserve">
    <value>&amp;Car</value>
  </data>
  <data name="ButtonClear" xml:space="preserve">
    <value>&amp;Clear</value>
  </data>
  <data name="ButtonDatabase" xml:space="preserve">
    <value>&amp;Database</value>
  </data>
  <data name="ButtonDelete" xml:space="preserve">
    <value>&amp;Delete</value>
  </data>
  <data name="ButtonDeleteBrand" xml:space="preserve">
    <value>Delete brand</value>
  </data>
  <data name="ButtonDeleteForSure" xml:space="preserve">
    <value>Confirm &amp;deletion</value>
  </data>
  <data name="ButtonDeleteUser" xml:space="preserve">
    <value>Delete user</value>
  </data>
  <data name="ButtonEdit" xml:space="preserve">
    <value>&amp;Edit</value>
  </data>
  <data name="ButtonExit" xml:space="preserve">
    <value>E&amp;xit</value>
  </data>
  <data name="ButtonExport" xml:space="preserve">
    <value>E&amp;xport</value>
  </data>
  <data name="ButtonExtra" xml:space="preserve">
    <value>&amp;Extra</value>
  </data>
  <data name="ButtonHelp" xml:space="preserve">
    <value>&amp;Help</value>
  </data>
  <data name="ButtonInsert" xml:space="preserve">
    <value>&amp;Insert</value>
  </data>
  <data name="ButtonLoad" xml:space="preserve">
    <value>&amp;Load</value>
  </data>
  <data name="ButtonNew" xml:space="preserve">
    <value>&amp;New</value>
  </data>
  <data name="ButtonRecalculate" xml:space="preserve">
    <value>&amp;Recalculate</value>
  </data>
  <data name="ButtonReload" xml:space="preserve">
    <value>&amp;Reload</value>
  </data>
  <data name="ButtonSave" xml:space="preserve">
    <value>&amp;Save</value>
  </data>
  <data name="ButtonSaveAndClose" xml:space="preserve">
    <value>Save and exit</value>
  </data>
  <data name="ButtonSettings" xml:space="preserve">
    <value>&amp;Settings</value>
  </data>
  <data name="ButtonStats" xml:space="preserve">
    <value>S&amp;tatistics</value>
  </data>
  <data name="CaptchaMismatch" xml:space="preserve">
    <value>Code is not matching!</value>
  </data>
  <data name="ClearDatabaseWarning" xml:space="preserve">
    <value>CLEARING THE DATABASE WILL
DELETE ALL CARS AND YOU WILL NOT
BE ABLE TO RECOVER THEM!</value>
  </data>
  <data name="CofirmBack" xml:space="preserve">
    <value>Back to the car list?</value>
  </data>
  <data name="Conclusion" xml:space="preserve">
    <value>Conclusion</value>
  </data>
  <data name="ConfirmExit" xml:space="preserve">
    <value>Exit program?</value>
  </data>
  <data name="DatabaseExportFilter" xml:space="preserve">
    <value>XML file</value>
  </data>
  <data name="DropDBLastChance" xml:space="preserve">
    <value>Last chance!! Confirm deletion?</value>
  </data>
  <data name="EmptyBrandError" xml:space="preserve">
    <value>The brand must not be empty!</value>
  </data>
  <data name="EmptyCommentWarning" xml:space="preserve">
    <value>Do you really want to leave the comment empty?
It can be helpful later on!</value>
  </data>
  <data name="EmptyModelError" xml:space="preserve">
    <value>The model must not  be empty!</value>
  </data>
  <data name="EmptyPartError" xml:space="preserve">
    <value>The partname must not be empty!</value>
  </data>
  <data name="EmptyPersonError" xml:space="preserve">
    <value>Person must not be empty!</value>
  </data>
  <data name="EmptyPositionError" xml:space="preserve">
    <value>Position must not be empty!</value>
  </data>
  <data name="EmptyUsernameError" xml:space="preserve">
    <value>Username must not be empty!</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorNoDatabaseFile" xml:space="preserve">
    <value>No database found!</value>
  </data>
  <data name="ErrorNoSettingsFile" xml:space="preserve">
    <value>No settings file found!</value>
  </data>
  <data name="ErrorPrefix" xml:space="preserve">
    <value>The following error occured:</value>
  </data>
  <data name="FirstStart" xml:space="preserve">
    <value>(This is expected when launching the program for the first time)</value>
  </data>
  <data name="FormatConfirmDelete" xml:space="preserve">
    <value>Do you really want to delete the entry '{0}'?</value>
  </data>
  <data name="FormatDuplicateWarning" xml:space="preserve">
    <value>The item {0} already exists!</value>
  </data>
  <data name="InvalidPriceError" xml:space="preserve">
    <value>Invalid value for price!</value>
  </data>
  <data name="InvoiceExportFilter" xml:space="preserve">
    <value>PDF file</value>
  </data>
  <data name="LabelAddedUser" xml:space="preserve">
    <value>user(s) were detected and automatically added from the database.</value>
  </data>
  <data name="LabelAverageCost" xml:space="preserve">
    <value>Average costs</value>
  </data>
  <data name="LabelAverageProfit" xml:space="preserve">
    <value>Average profit</value>
  </data>
  <data name="LabelAverageSell" xml:space="preserve">
    <value>Average selling price</value>
  </data>
  <data name="LabelBrand" xml:space="preserve">
    <value>Brand</value>
  </data>
  <data name="LabelBrands" xml:space="preserve">
    <value>Brands</value>
  </data>
  <data name="LabelCalculation" xml:space="preserve">
    <value>Calculation</value>
  </data>
  <data name="LabelCaptcha" xml:space="preserve">
    <value>Confirmation captcha:</value>
  </data>
  <data name="LabelCaptcha2" xml:space="preserve">
    <value>Enter captcha:</value>
  </data>
  <data name="LabelCar" xml:space="preserve">
    <value>Car</value>
  </data>
  <data name="LabelCarsInDatabase" xml:space="preserve">
    <value>Number of cars in the database</value>
  </data>
  <data name="LabelComment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="LabelCost" xml:space="preserve">
    <value>Cost</value>
  </data>
  <data name="LabelDate" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="LabelDefaultValue" xml:space="preserve">
    <value>default value</value>
  </data>
  <data name="LabelDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="LabelDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="LabelDownPayment" xml:space="preserve">
    <value>Down payment</value>
  </data>
  <data name="LabelEntry" xml:space="preserve">
    <value>Entries</value>
  </data>
  <data name="LabelID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="LabelInclude" xml:space="preserve">
    <value>Include</value>
  </data>
  <data name="LabelInvoice" xml:space="preserve">
    <value>Invoice</value>
  </data>
  <data name="LabelKey" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="LabelLanguage" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LabelModel" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="LabelNewEntry" xml:space="preserve">
    <value>New entry</value>
  </data>
  <data name="LabelNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="LabelNotInclude" xml:space="preserve">
    <value>Not included</value>
  </data>
  <data name="LabelParts" xml:space="preserve">
    <value>Parts</value>
  </data>
  <data name="LabelPayout" xml:space="preserve">
    <value>Payout</value>
  </data>
  <data name="LabelPerson" xml:space="preserve">
    <value>Person</value>
  </data>
  <data name="LabelPosition" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="LabelPrice" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="LabelProfit" xml:space="preserve">
    <value>Income</value>
  </data>
  <data name="LabelRestPayment" xml:space="preserve">
    <value>Rest</value>
  </data>
  <data name="LabelSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="LabelSum" xml:space="preserve">
    <value>Sum</value>
  </data>
  <data name="LabelTotal" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="LabelTotalProfit" xml:space="preserve">
    <value>Total profit in</value>
  </data>
  <data name="LabelUsers" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="LabelValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="LabelWin" xml:space="preserve">
    <value>Win</value>
  </data>
  <data name="LabelYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="MenuOptions" xml:space="preserve">
    <value>&amp;Options</value>
  </data>
  <data name="MenuView" xml:space="preserve">
    <value>&amp;View</value>
  </data>
  <data name="NegativeDownPaymentWarning" xml:space="preserve">
    <value>Do you really want the down payment to be negative?</value>
  </data>
  <data name="NegativePriceWarning" xml:space="preserve">
    <value>Should price really be negative?</value>
  </data>
  <data name="NoCarSelected" xml:space="preserve">
    <value>No car selected!</value>
  </data>
  <data name="NoUsersWarning" xml:space="preserve">
    <value>No users have been created yet!
You will not be able to use the program fully without users.

Add users now?</value>
  </data>
  <data name="PayoutPerPerson" xml:space="preserve">
    <value>Payout per person</value>
  </data>
  <data name="SpendingPerPerson" xml:space="preserve">
    <value>Spendings per person</value>
  </data>
  <data name="Spendings" xml:space="preserve">
    <value>Spendings</value>
  </data>
  <data name="TitleDeleteDatabase" xml:space="preserve">
    <value>Delete database</value>
  </data>
  <data name="TitleEditCar" xml:space="preserve">
    <value>Edit car</value>
  </data>
  <data name="TitleEditEntry" xml:space="preserve">
    <value>Edit entry</value>
  </data>
  <data name="TitleGraph" xml:space="preserve">
    <value>Graph</value>
  </data>
  <data name="TitleNewCar" xml:space="preserve">
    <value>Add new car</value>
  </data>
  <data name="TitleStats" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
</root>